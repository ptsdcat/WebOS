import { FC, useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { 
  Monitor, 
  Layout, 
  Keyboard, 
  Mouse, 
  Palette, 
  Settings, 
  Terminal,
  Grid3X3,
  Move,
  Eye,
  Volume2,
  Wifi,
  Battery,
  Clock,
  Save,
  Download,
  Upload,
  RefreshCw
} from 'lucide-react';

interface HyprlandConfigSection {
  name: string;
  settings: Record<string, any>;
}

export const HyprlandConfig: FC = () => {
  const [config, setConfig] = useState<HyprlandConfigSection[]>([
    {
      name: 'general',
      settings: {
        gaps_in: 5,
        gaps_out: 20,
        border_size: 2,
        'col.active_border': 'rgba(33ccffee) rgba(00ff99ee) 45deg',
        'col.inactive_border': 'rgba(595959aa)',
        resize_on_border: false,
        allow_tearing: false,
        layout: 'dwindle'
      }
    },
    {
      name: 'decoration',
      settings: {
        rounding: 10,
        'blur.enabled': true,
        'blur.size': 3,
        'blur.passes': 1,
        'drop_shadow': true,
        'shadow_range': 4,
        'shadow_render_power': 3,
        'col.shadow': 'rgba(1a1a1aee)'
      }
    },
    {
      name: 'animations',
      settings: {
        enabled: true,
        bezier: 'myBezier, 0.05, 0.9, 0.1, 1.05',
        'animation.windows': 'myBezier',
        'animation.windowsOut': 'default',
        'animation.border': 'default',
        'animation.borderangle': 'default',
        'animation.fade': 'default',
        'animation.workspaces': 'default'
      }
    },
    {
      name: 'input',
      settings: {
        kb_model: '',
        kb_layout: 'us',
        kb_variant: '',
        kb_options: '',
        kb_rules: '',
        follow_mouse: 1,
        touchpad: {
          natural_scroll: false
        }
      }
    }
  ]);

  const [activeTab, setActiveTab] = useState('general');
  const [keybinds, setKeybinds] = useState([
    { mod: 'SUPER', key: 'Q', action: 'exec, kitty' },
    { mod: 'SUPER', key: 'C', action: 'killactive' },
    { mod: 'SUPER', key: 'M', action: 'exit' },
    { mod: 'SUPER', key: 'E', action: 'exec, dolphin' },
    { mod: 'SUPER', key: 'V', action: 'togglefloating' },
    { mod: 'SUPER', key: 'R', action: 'exec, wofi --show drun' },
    { mod: 'SUPER', key: 'P', action: 'pseudo' },
    { mod: 'SUPER', key: 'J', action: 'togglesplit' },
    { mod: 'SUPER', key: 'left', action: 'movefocus, l' },
    { mod: 'SUPER', key: 'right', action: 'movefocus, r' },
    { mod: 'SUPER', key: 'up', action: 'movefocus, u' },
    { mod: 'SUPER', key: 'down', action: 'movefocus, d' }
  ]);

  const [monitors, setMonitors] = useState([
    { name: 'DP-1', resolution: '1920x1080@60', position: '0x0', scale: '1' },
    { name: 'HDMI-A-1', resolution: '1920x1080@60', position: '1920x0', scale: '1' }
  ]);

  const [workspaces, setWorkspaces] = useState([
    { id: 1, name: 'Main', monitor: 'DP-1', default: true },
    { id: 2, name: 'Web', monitor: 'DP-1', default: false },
    { id: 3, name: 'Code', monitor: 'DP-1', default: false },
    { id: 4, name: 'Media', monitor: 'HDMI-A-1', default: false },
    { id: 5, name: 'Games', monitor: 'HDMI-A-1', default: false }
  ]);

  const generateConfig = () => {
    let configText = '# Hyprland Configuration Generated by WebOS\n\n';
    
    config.forEach(section => {
      configText += `${section.name} {\n`;
      Object.entries(section.settings).forEach(([key, value]) => {
        if (typeof value === 'object') {
          Object.entries(value).forEach(([subKey, subValue]) => {
            configText += `    ${key}:${subKey} = ${subValue}\n`;
          });
        } else {
          configText += `    ${key} = ${value}\n`;
        }
      });
      configText += '}\n\n';
    });

    // Add monitor configuration
    configText += '# Monitor Configuration\n';
    monitors.forEach(monitor => {
      configText += `monitor = ${monitor.name},${monitor.resolution},${monitor.position},${monitor.scale}\n`;
    });
    configText += '\n';

    // Add workspace configuration
    configText += '# Workspace Configuration\n';
    workspaces.forEach(workspace => {
      configText += `workspace = ${workspace.id}, monitor:${workspace.monitor}${workspace.default ? ', default:true' : ''}\n`;
    });
    configText += '\n';

    // Add keybinds
    configText += '# Keybinds\n';
    keybinds.forEach(bind => {
      configText += `bind = ${bind.mod}, ${bind.key}, ${bind.action}\n`;
    });

    return configText;
  };

  const exportConfig = () => {
    const configText = generateConfig();
    const blob = new Blob([configText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'hypr.conf';
    a.click();
    URL.revokeObjectURL(url);
  };

  const updateSetting = (sectionName: string, key: string, value: any) => {
    setConfig(prev => prev.map(section => 
      section.name === sectionName 
        ? { ...section, settings: { ...section.settings, [key]: value } }
        : section
    ));
  };

  return (
    <div className="w-full h-full flex flex-col bg-background">
      <div className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center space-x-3">
          <Layout className="w-6 h-6 text-primary" />
          <h2 className="text-2xl font-bold">Hyprland Configuration</h2>
          <Badge variant="secondary">WebOS Integration</Badge>
        </div>
        <div className="flex items-center space-x-2">
          <Button onClick={exportConfig} size="sm" variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export Config
          </Button>
          <Button size="sm">
            <Save className="w-4 h-4 mr-2" />
            Apply
          </Button>
        </div>
      </div>

      <div className="flex-1 p-4 overflow-auto">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="general">General</TabsTrigger>
            <TabsTrigger value="appearance">Appearance</TabsTrigger>
            <TabsTrigger value="keybinds">Keybinds</TabsTrigger>
            <TabsTrigger value="monitors">Monitors</TabsTrigger>
            <TabsTrigger value="workspaces">Workspaces</TabsTrigger>
            <TabsTrigger value="advanced">Advanced</TabsTrigger>
          </TabsList>

          <TabsContent value="general" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Settings className="w-5 h-5" />
                  <span>General Settings</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium">Gaps Inner</label>
                    <Input
                      type="number"
                      value={config.find(s => s.name === 'general')?.settings.gaps_in || 5}
                      onChange={(e) => updateSetting('general', 'gaps_in', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Gaps Outer</label>
                    <Input
                      type="number"
                      value={config.find(s => s.name === 'general')?.settings.gaps_out || 20}
                      onChange={(e) => updateSetting('general', 'gaps_out', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Border Size</label>
                    <Input
                      type="number"
                      value={config.find(s => s.name === 'general')?.settings.border_size || 2}
                      onChange={(e) => updateSetting('general', 'border_size', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Layout</label>
                    <select 
                      className="w-full p-2 border rounded"
                      value={config.find(s => s.name === 'general')?.settings.layout || 'dwindle'}
                      onChange={(e) => updateSetting('general', 'layout', e.target.value)}
                    >
                      <option value="dwindle">Dwindle</option>
                      <option value="master">Master</option>
                    </select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="appearance" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Palette className="w-5 h-5" />
                  <span>Visual Effects</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium">Rounding</label>
                    <Input
                      type="number"
                      value={config.find(s => s.name === 'decoration')?.settings.rounding || 10}
                      onChange={(e) => updateSetting('decoration', 'rounding', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Blur Size</label>
                    <Input
                      type="number"
                      value={config.find(s => s.name === 'decoration')?.settings['blur.size'] || 3}
                      onChange={(e) => updateSetting('decoration', 'blur.size', parseInt(e.target.value))}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium">Enable Blur</label>
                    <Switch
                      checked={config.find(s => s.name === 'decoration')?.settings['blur.enabled'] || false}
                      onCheckedChange={(checked) => updateSetting('decoration', 'blur.enabled', checked)}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium">Drop Shadow</label>
                    <Switch
                      checked={config.find(s => s.name === 'decoration')?.settings['drop_shadow'] || false}
                      onCheckedChange={(checked) => updateSetting('decoration', 'drop_shadow', checked)}
                    />
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium">Active Border Color</label>
                  <Input
                    value={config.find(s => s.name === 'general')?.settings['col.active_border'] || ''}
                    onChange={(e) => updateSetting('general', 'col.active_border', e.target.value)}
                    placeholder="rgba(33ccffee) rgba(00ff99ee) 45deg"
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="keybinds" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Keyboard className="w-5 h-5" />
                  <span>Keyboard Shortcuts</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {keybinds.map((bind, index) => (
                    <div key={index} className="flex items-center space-x-2 p-2 border rounded">
                      <Badge variant="outline">{bind.mod}</Badge>
                      <span>+</span>
                      <Badge variant="outline">{bind.key}</Badge>
                      <span>=</span>
                      <span className="flex-1 text-sm">{bind.action}</span>
                      <Button size="sm" variant="ghost">Edit</Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="monitors" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Monitor className="w-5 h-5" />
                  <span>Monitor Configuration</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {monitors.map((monitor, index) => (
                    <div key={index} className="p-4 border rounded space-y-2">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium">{monitor.name}</h4>
                        <Badge variant="secondary">Active</Badge>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <div>
                          <label className="text-xs text-muted-foreground">Resolution</label>
                          <Input value={monitor.resolution} onChange={() => {}} />
                        </div>
                        <div>
                          <label className="text-xs text-muted-foreground">Position</label>
                          <Input value={monitor.position} onChange={() => {}} />
                        </div>
                        <div>
                          <label className="text-xs text-muted-foreground">Scale</label>
                          <Input value={monitor.scale} onChange={() => {}} />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="workspaces" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Grid3X3 className="w-5 h-5" />
                  <span>Workspace Management</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  {workspaces.map((workspace) => (
                    <div key={workspace.id} className="p-4 border rounded space-y-2">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium">Workspace {workspace.id}</h4>
                        {workspace.default && <Badge variant="default">Default</Badge>}
                      </div>
                      <p className="text-sm text-muted-foreground">{workspace.name}</p>
                      <p className="text-xs text-muted-foreground">Monitor: {workspace.monitor}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="advanced" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Terminal className="w-5 h-5" />
                  <span>Raw Configuration</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  value={generateConfig()}
                  readOnly
                  className="font-mono text-sm h-96"
                  placeholder="Generated configuration will appear here..."
                />
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};